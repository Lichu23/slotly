import { NextResponse } from "next/server";
import { google } from "googleapis";

// Configuraci√≥n de OAuth 2.0 para Google Calendar
const oauth2Client = new google.auth.OAuth2(
  process.env.GOOGLE_CLIENT_ID,
  process.env.GOOGLE_CLIENT_SECRET,
  `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/google-calendar/callback`
);

export async function POST() {
  try {
    console.log("üîê Iniciando autenticaci√≥n con Google Calendar...");

    // Generar URL de autorizaci√≥n
    const authUrl = oauth2Client.generateAuthUrl({
      access_type: 'offline',
      scope: [
        'https://www.googleapis.com/auth/calendar',
        'https://www.googleapis.com/auth/calendar.events',
        'https://www.googleapis.com/auth/calendar.settings.readonly',
        'email',
        'profile'
      ],
      prompt: 'consent', // Forzar consentimiento para obtener refresh token
    });

    console.log("‚úÖ URL de autorizaci√≥n generada:", authUrl);

    return NextResponse.json({ authUrl });
  } catch (error) {
    console.error("‚ùå Error generando URL de autorizaci√≥n:", error);
    return NextResponse.json(
      { error: "Error al generar URL de autorizaci√≥n" },
      { status: 500 }
    );
  }
}

// Funci√≥n para intercambiar c√≥digo de autorizaci√≥n por tokens
export async function PUT(request: Request) {
  try {
    const { code } = await request.json();
    
    if (!code) {
      return NextResponse.json(
        { error: "C√≥digo de autorizaci√≥n requerido" },
        { status: 400 }
      );
    }

    console.log("üîÑ Intercambiando c√≥digo por tokens...");

    // Intercambiar c√≥digo por tokens
    const { tokens } = await oauth2Client.getToken(code);
    
    if (!tokens.access_token) {
      throw new Error("No se pudo obtener access token");
    }

    // Configurar credenciales
    oauth2Client.setCredentials(tokens);

    // Obtener informaci√≥n del usuario
    const oauth2 = google.oauth2({ version: 'v2', auth: oauth2Client });
    const userInfo = await oauth2.userinfo.get();
    
    // Obtener lista de calendarios
    const calendar = google.calendar({ version: 'v3', auth: oauth2Client });
    const calendarList = await calendar.calendarList.list();

    // Buscar calendario principal o crear uno
    let primaryCalendar = calendarList.data.items?.find(cal => cal.primary);
    
    if (!primaryCalendar) {
      // Si no hay calendario principal, usar el primero disponible
      primaryCalendar = calendarList.data.items?.[0];
    }

    if (!primaryCalendar) {
      throw new Error("No se encontr√≥ ning√∫n calendario");
    }

    const credentials = {
      accessToken: tokens.access_token,
      refreshToken: tokens.refresh_token || '',
      calendarId: primaryCalendar.id || 'primary',
      email: userInfo.data.email || '',
      name: userInfo.data.name || '',
    };

    console.log("‚úÖ Credenciales obtenidas exitosamente");
    console.log("üìß Email:", credentials.email);
    console.log("üìÖ Calendario:", credentials.calendarId);

    return NextResponse.json({ 
      success: true, 
      credentials 
    });

  } catch (error) {
    console.error("‚ùå Error intercambiando c√≥digo por tokens:", error);
    return NextResponse.json(
      { error: "Error al obtener credenciales de Google" },
      { status: 500 }
    );
  }
}
